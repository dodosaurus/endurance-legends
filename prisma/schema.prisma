datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int             @id @default(autoincrement())
  athleteId         Int             @unique
  username          String          @unique
  name              String
  city              String?         @default("not specified")
  country           String?         @default("not specified")
  profile           String          @default("url to default avatar large")
  profileMedium     String          @default("url to default avatar small")
  accountBalance    Int             @default(0)
  totalRunDistance  Float           @default(0)
  totalRideDistance Float           @default(0)
  totalWalkDistance Float           @default(0)
  collectedCards    Int             @default(0)
  lastOpenedPack    Int[]           @default([])
  inAppSince        DateTime        @default(now())
  lastStravaRefresh DateTime        @default(now())
  stravaSession     StravaSession[]
  activities        Activity[]
  newActivityIds    Int[]           @default([])
  transactions      Transaction[]
  ownedCards        OwnedCard[]
}

model StravaSession {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userAthleteId], references: [athleteId], onDelete: Cascade)
  userAthleteId    Int      @unique
  refreshTokenCode String   @unique
  accessTokenCode  String   @unique
  expiresAt        DateTime
  scope            String   @default("read")
}

model Activity {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userAthleteId], references: [athleteId], onDelete: Cascade)
  userAthleteId      Int
  activityId         String   @unique
  name               String   @default("Activity")
  type               String
  distance           Float
  movingTime         Int
  elapsedTime        Int
  totalElevationGain Float    @default(0)
  startDate          DateTime
  startDateLocal     DateTime
  inSystemSince      DateTime @default(now())
  locationCountry    String
  kudosCount         Int      @default(0)
  bonusTriggered     Boolean  @default(false)
}

model Transaction {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userAthleteId], references: [athleteId], onDelete: Cascade)
  userAthleteId  Int
  desc           String   @default("")
  amount         Int
  linkedActivity String   @default("")
  createdAt      DateTime @default(now())
}

model Card {
  id              Int         @id @default(autoincrement())
  uuid            String      @default(uuid())
  collectionId    Int         @default(1)
  rarity          String      @default("common")
  name            String      @default("")
  country         String      @default("")
  dateInfo        String?     @default("")
  additionalInfo1 String?     @default("")
  additionalInfo2 String?     @default("")
  extendedInfo    String?     @default("")
  ownedCards      OwnedCard[]
  cardImageName   String      @default("")
  cardImageUrl    String      @default("next.svg")
  cardImageSource String?     @default("")
}

model OwnedCard {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userAthleteId], references: [athleteId], onDelete: Cascade)
  userAthleteId Int
  card          Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId        Int
  acquiredAt    DateTime @default(now())
  isNew         Boolean  @default(false)
}
